#!/bin/bash
# Source: http://unix.stackexchange.com/a/24636/18876
# See also: dateutils.ddiff

DATE=dateex; type -t "$DATE" >/dev/null || DATE=date	# Use extended date parsing via dateex if available.

readonly availableOutputFormats='seconds|minutes|hours|days|weeks|months|years|generations|whole-units|smallest-unit|best-unit|largest-unit|textform'
printUsage()
{
    cat <<HELPTEXT
Calculate difference between two DATEs or TIMEs / the passed DATE or TIME and
now, and print it in flexible units depending on the magnitude of the
difference.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" "[-u|--utc|--universal] [-o|--output ${availableOutputFormats}] DATE|TIME [DATE|TIME] [-?|-h|--help]"
    echo
    cat <<HELPTEXT
Print the passed difference in seconds or days in flexible units depending on
the magnitude of the difference.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" "[-u|--utc|--universal] [-o|--output ${availableOutputFormats}] -s|--seconds|-d|--days NUM [-?|-h|--help]"
}

typeset -a dateArgs=()
hasDifference=
secondsDiff=0
daysDiff=
outputFormat=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--universal|--utc|-u)
			dateArgs+=("$1"); shift;;
	--output|-o)	shift; outputFormat="$1"; shift;;
	--seconds|-s)	shift; secondsDiff="${1:?}"; shift; hasDifference=t;;
	--days|-d)	shift; daysDiff="${1:?}"; shift; hasDifference=t;;
	--)		[ "$hasDifference" ] || shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

if [ "$hasDifference" ]; then
    if [ $# -gt 0 ]; then
	printUsage "$0" >&2
	exit 2
    fi
else
    if [ $# -lt 1 -o $# -gt 2 ]; then
	printUsage "$0" >&2
	exit 2
    fi

    typeset d1; d1=$("$DATE" "${dateArgs[@]}" --date="$1" +%s) || exit 1
    typeset d2; d2=$("$DATE" "${dateArgs[@]}" --date="${2:-}" +%s) || exit 1
    secondsDiff=$(( (d1-d2) > 0 ? (d1-d2) : (d2-d1)))
fi
[ -n "$daysDiff" ] || daysDiff=$(( (secondsDiff + 43200) / 86400 ))

typeset -a diffInUnits=()
addDiffUnit()
{
    local diff="$1"; shift
    local unit="$1"; shift

    [ "$diff" = 0 -a "$unit" != second ] && return	# Skip values that are zero, but keep at least "0 seconds" as the pathological corner case.
    local flooredDiff="${diff%.*}"
    [ ${#flooredDiff} -gt 4 ] && return	# Skip values that are too large (>9999).

    local unitPlural='s'
    [ "$diff" = '1' ] && unitPlural=

    diffInUnits+=("$diff ${unit}${unitPlural}")
}
calculateUnit()
{
    local diff=$1; shift
    local unit=$1; shift
    local divisor=$1; shift
    local unitDiff="$(divround $((100 * diff / divisor)))"
    addDiffUnit "$unitDiff" "$unit"
}

addDiffUnit   "$secondsDiff" second
calculateUnit "$secondsDiff" minute 60
calculateUnit "$secondsDiff" hour 3600
calculateUnit "$secondsDiff" day 86400
calculateUnit "$daysDiff"    week 7
calculateUnit "$daysDiff"    month 30
calculateUnit "$daysDiff"    year 365
calculateUnit "$daysDiff"    generation 9131

case "$outputFormat" in
    '')		    joinBy ' = ' "${diffInUnits[@]}";;

    seconds)	    printf '%s\n' "$secondsDiff";;
    minutes)	    printf '%s\n' "$((secondsDiff / 60))";;
    hours)	    printf '%s\n' "$((secondsDiff / 3600))";;
    days)	    printf '%s\n' "$daysDiff";;
    weeks)	    printf '%s\n' "$((daysDiff / 7))";;
    months)	    printf '%s\n' "$((daysDiff / 30))";;
    years)	    printf '%s\n' "$((daysDiff / 365))";;
    generations)    printf '%s\n' "$((daysDiff / 9131))";;

    whole-units)    # Choose all units that are not just a fraction; i.e. do not start with 0.
		    typeset -a wholeUnits=()
		    for unit in "${diffInUnits[@]}"
		    do
			[ "${unit:0:1}" = 0 ] || wholeUnits+=("$unit")
		    done
		    if [ ${#wholeUnits[@]} -eq 0 ]; then
			printf '%s\n' "${diffInUnits[-1]}"
		    else
			joinBy ' = ' "${wholeUnits[@]}"
		    fi
		    ;;
    smallest-unit)  printf '%s\n' "${diffInUnits[0]}";;
    largest-unit)   printf '%s\n' "${diffInUnits[-1]}";;
    best-unit)	    # Choose the largest one that is not just a fraction; i.e. does not start with 0.
		    for ((i = $((${#diffInUnits[@]} - 1)); i >= 0; i--))
		    do
			best="${diffInUnits[i]}"
			[ "${best:0:1}" = 0 ] || break
		    done
		    printf '%s\n' "$best"
		    ;;
    textform)	    alternatives=("${diffInUnits[@]}" "$(joinBy ' = ' "${diffInUnits[@]}")")
		    joinBy --prefix '[' --suffix ']' '|' "${alternatives[@]}"
		    ;;
    *)		    printf >&2 'ERROR: Invalid output format: %s\n' "$outputFormat"; exit 2;;
esac
